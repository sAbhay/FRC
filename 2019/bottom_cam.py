import cv2
import numpy as np
import math
from enum import Enum
from itertools import groupby
from operator import itemgetter

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """

    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__hsv_threshold_hue = [0.0, 180.0]
        self.__hsv_threshold_saturation = [0.0, 255.0]
        self.__hsv_threshold_value = [255.0, 255.0]

        self.hsv_threshold_output = None

        self.__cv_erode_src = self.hsv_threshold_output
        self.__cv_erode_kernel = None
        self.__cv_erode_anchor = (-1, -1)
        self.__cv_erode_iterations = 7.0
        self.__cv_erode_bordertype = cv2.BORDER_CONSTANT
        self.__cv_erode_bordervalue = (-1)

        self.cv_erode_output = None

    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSV_Threshold0:
        self.__hsv_threshold_input = source0
        (self.hsv_threshold_output) = self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue,
                                                           self.__hsv_threshold_saturation, self.__hsv_threshold_value)

        # Step CV_erode0:
        self.__cv_erode_src = self.hsv_threshold_output
        (self.cv_erode_output) = self.__cv_erode(self.__cv_erode_src, self.__cv_erode_kernel, self.__cv_erode_anchor,
                                                 self.__cv_erode_iterations, self.__cv_erode_bordertype,
                                                 self.__cv_erode_bordervalue)
        return self.cv_erode_output

    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]), (hue[1], sat[1], val[1]))

    @staticmethod
    def __cv_erode(src, kernel, anchor, iterations, border_type, border_value):
        """Expands area of lower value in an image.
        Args:
           src: A numpy.ndarray.
           kernel: The kernel for erosion. A numpy.ndarray.
           iterations: the number of times to erode.
           border_type: Opencv enum that represents a border type.
           border_value: value to be used for a constant border.
        Returns:
            A numpy.ndarray after erosion.
        """
        return cv2.erode(src, kernel, anchor, iterations=(int)(iterations + 0.5),
                         borderType=border_type, borderValue=border_value)


cam = cv2.VideoCapture(0)

cv2.namedWindow("test")

img_counter = 0

threshold = 50

while True:
    ret, frame = cam.read()
    # cv2.imshow("test", frame)
    if not ret:
        break
    k = cv2.waitKey(1)

    if k % 256 == 27:
        # ESC pressed
        print("Escape hit, closing...")
        break
    elif k % 256 == 32:
        # SPACE pressed
        img_name = "opencv_frame_{}.png".format(img_counter)
        cv2.imwrite(img_name, frame)
        print("{} written!".format(img_name))
        img_counter += 1

    pipe = GripPipeline()
    img = pipe.process(source0=frame)

    pix = np.argwhere(img == 255)
    rows = [(k, list(list(zip(*g))[1])) for k, g in groupby(pix, itemgetter(0))]
    mX = [(r[0], int(np.mean(r[1]))) for r in rows]

    for x in mX:
        img[x] = 128
    # print(mX)

    sum = avgDif = 0
    for m in mX:
        sum += m[1] - (img.shape[1] // 2)
    if len(mX) > 0:
        avgDif = sum/len(mX)
    print(avgDif)

    for y in range(0, img.shape[0]):
        img[y][img.shape[1] // 2] = 128

    if abs(avgDif) > theshold:
        # interface with Roborio
        # send avgDif // abs(avgDif)
        pass

    cv2.imshow("test", img)

cam.release()

cv2.destroyAllWindows()